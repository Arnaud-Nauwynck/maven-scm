<?xml version="1.0" encoding="UTF-8"?>

<!--
  ~ Licensed to the Apache Software Foundation (ASF) under one
  ~ or more contributor license agreements.  See the NOTICE file
  ~ distributed with this work for additional information
  ~ regarding copyright ownership.  The ASF licenses this file
  ~ to you under the Apache License, Version 2.0 (the
  ~ "License"); you may not use this file except in compliance
  ~ with the License.  You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing,
  ~ software distributed under the License is distributed on an
  ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  ~ KIND, either express or implied.  See the License for the
  ~ specific language governing permissions and limitations
  ~ under the License.
-->

<model xmlns="https://codehaus-plexus.github.io/MODELLO/1.8.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="https://codehaus-plexus.github.io/MODELLO/1.8.0 https://codehaus-plexus.github.io/modello/xsd/modello-1.8.0.xsd"
  xml.namespace="http://maven.apache.org/SCM/mount-repos/${version}"
  xml.schemaLocation="http://maven.apache.org/xsd/scm-mount-repos-${version}.xsd">
  <id>manifest</id>
  <name>MountReposManifest</name>
  <description>Manifest for SCM Mount Repos</description>
  <defaults>
    <default>
      <key>package</key>
      <value>org.apache.maven.scm.providers.mountrepos.manifest</value>
    </default>
  </defaults>

  <classes>

<!--
  <!ELEMENT manifest (notice?,
                      remote*,
                      default?,
                      manifest-server?,
                      remove-project*,
                      project*,
                      extend-project*,
                      repo-hooks?,
                      include*)>
  <!ELEMENT notice (#PCDATA)>

-->
    <class rootElement="true" xml.tagName="manifest" xsd.compositor="sequence">
      <name>MountReposManifest</name>
      <version>1.11.3+</version>
      <fields>
        <field>
          <name>notice</name>
          <version>1.11.3+</version>
          <type>String</type>
          <description><![CDATA[
          ]]></description>
        </field>

        <field xml.tagName="remote">
          <name>remotes</name>
          <version>1.11.3+</version>
          <association xml.itemsStyle="flat">
            <type>RepoProjectRemote</type>
            <multiplicity>*</multiplicity>
          </association>
          <description><![CDATA[
          ]]></description>
        </field>
        <field xml.tagName="default">
          <name>projectDefault</name>
          <version>1.11.3+</version>
          <association>
            <type>RepoRemoteDefault</type>
            <multiplicity>1</multiplicity>
          </association>
          <description><![CDATA[
          ]]></description>
        </field>
        <field xml.tagName="manifest-server">
          <name>manifestServer</name>
          <version>1.11.3+</version>
          <association>
            <type>RepoManifestServer</type>
            <multiplicity>1</multiplicity>
          </association>
          <description><![CDATA[
          ]]></description>
        </field>
        <field xml.tagName="project-remove">
          <name>projectRemoves</name>
          <version>1.11.3+</version>
          <association xml.itemsStyle="flat">
            <type>RepoRemoveProject</type>
            <multiplicity>*</multiplicity>
          </association>
          <description><![CDATA[
          ]]></description>
        </field>
        <field xml.tagName="project">
          <name>projects</name>
          <version>1.11.3+</version>
          <association xml.itemsStyle="flat">
            <type>RepoProject</type>
            <multiplicity>*</multiplicity>
          </association>
          <description><![CDATA[
          ]]></description>
        </field>
        <field xml.tagName="extend-project">
          <name>extendProjects</name>
          <version>1.11.3+</version>
          <association xml.itemsStyle="flat">
            <type>RepoExtendProject</type>
            <multiplicity>*</multiplicity>
          </association>
          <description><![CDATA[
          ]]></description>
        </field>
        <field xml.tagName="repo-hook">
          <name>repoHooks</name>
          <version>1.11.3+</version>
          <association xml.itemsStyle="flat">
            <type>RepoHook</type>
            <multiplicity>*</multiplicity>
          </association>
          <description><![CDATA[
          ]]></description>
        </field>
        <field xml.tagName="include">
          <name>includes</name>
          <version>1.11.3+</version>
          <association xml.itemsStyle="flat">
            <type>RepoInclude</type>
            <multiplicity>*</multiplicity>
          </association>
          <description><![CDATA[
          ]]></description>
        </field>
      </fields>
    </class>


<!--
  <!ELEMENT remote EMPTY>
  <!ATTLIST remote name         ID    #REQUIRED>
  <!ATTLIST remote alias        CDATA #IMPLIED>
  <!ATTLIST remote fetch        CDATA #REQUIRED>
  <!ATTLIST remote pushurl      CDATA #IMPLIED>
  <!ATTLIST remote review       CDATA #IMPLIED>
  <!ATTLIST remote revision     CDATA #IMPLIED>

One or more remote elements may be specified. Each remote element specifies a Git URL shared by one or more projects and (optionally) the Gerrit review server those projects upload changes through.

-->
    <class xml.tagName="remote">
      <name>RepoProjectRemote</name>
      <version>1.11.3+</version>
      <fields>
        <field xml.attribute="true">
          <name>name</name>
          <version>1.11.3+</version>
          <type>String</type>
          <required>true</required>
          <description><![CDATA[A short name unique to this manifest file. The name specified here is used as the remote name in each project's .git/config, and is therefore automatically available to commands like git fetch, git remote, git pull and git push.
          ]]></description>
        </field>
        <field xml.attribute="true">
          <name>alias</name>
          <version>1.11.3+</version>
          <type>String</type>
          <description><![CDATA[The alias, if specified, is used to override name to be set as the remote name in each project's .git/config. Its value can be duplicated while attribute name has to be unique in the manifest file. This helps each project to be able to have same remote name which actually points to different remote url.
          ]]></description>
        </field>
        <field xml.attribute="true">
          <name>fetch</name>
          <version>1.11.3+</version>
          <type>String</type>
          <required>true</required>
          <description><![CDATA[The Git URL prefix for all projects which use this remote. Each project's name is appended to this prefix to form the actual URL used to clone the project.
          ]]></description>
        </field>
        <field xml.attribute="true">
          <name>pushurl</name>
          <version>1.11.3+</version>
          <type>String</type>
          <description><![CDATA[The Git “push” URL prefix for all projects which use this remote. Each project's name is appended to this prefix to form the actual URL used to “git push” the project. This attribute is optional; if not specified then “git push” will use the same URL as the fetch attribute.
          ]]></description>
        </field>
        <field xml.attribute="true">
          <name>review</name>
          <version>1.11.3+</version>
          <type>String</type>
          <defaultValue></defaultValue>
          <description><![CDATA[Hostname of the Gerrit server where reviews are uploaded to by repo upload. This attribute is optional; if not specified then repo upload will not function.
          ]]></description>
        </field>
        <field xml.attribute="true">
          <name>revision</name>
          <version>1.11.3+</version>
          <type>String</type>
          <defaultValue></defaultValue>
          <description><![CDATA[Name of a Git branch (e.g. master or refs/heads/master). Remotes with their own revision will override the default revision.
          ]]></description>
        </field>
      </fields>
    </class>


<!--
  <!ELEMENT default EMPTY>
  <!ATTLIST default remote      IDREF #IMPLIED>
  <!ATTLIST default revision    CDATA #IMPLIED>
  <!ATTLIST default dest-branch CDATA #IMPLIED>
  <!ATTLIST default upstream    CDATA #IMPLIED>
  <!ATTLIST default sync-j      CDATA #IMPLIED>
  <!ATTLIST default sync-c      CDATA #IMPLIED>
  <!ATTLIST default sync-s      CDATA #IMPLIED>
  <!ATTLIST default sync-tags   CDATA #IMPLIED>

Element default
At most one default element may be specified. Its remote and revision attributes are used when a project element does not specify its own remote or revision attribute.
-->
    <class xml.tagName="default">
      <name>RepoRemoteDefault</name>
      <version>1.11.3+</version>
      <fields>
        <field xml.attribute="true">
          <name>remote</name>
          <version>1.11.3+</version>
          <type>String</type>
          <description><![CDATA[
            Name of a previously defined remote element. Project elements lacking a remote attribute of their own will use this remote.
          ]]></description>
        </field>
        <field xml.attribute="true">
          <name>revision</name>
          <version>1.11.3+</version>
          <type>String</type>
          <description><![CDATA[
            Name of a Git branch (e.g. master or refs/heads/master). Project elements lacking their own revision attribute will use this revision.
          ]]></description>
        </field>
        <field xml.attribute="true" xml.attributeName="dest-branch">
          <name>destBranch</name>
          <version>1.11.3+</version>
          <type>String</type>
          <description><![CDATA[
            Name of a Git branch (e.g. master). Project elements not setting their own dest-branch will inherit this value. If this value is not set, projects will use revision by default instead.
          ]]></description>
        </field>
        <field xml.attribute="true">
          <name>upstream</name>
          <version>1.11.3+</version>
          <type>String</type>
          <description><![CDATA[
            Name of the Git ref in which a sha1 can be found. Used when syncing a revision locked manifest in -c mode to avoid having to sync the entire ref space. Project elements not setting their own upstream will inherit this value.
          ]]></description>
        </field>
        <field xml.attribute="true" xml.attributeName="sync-j">
          <name>syncJobsCount</name>
          <version>1.11.3+</version>
          <type>int</type>
          <description><![CDATA[
            Number of parallel jobs to use when synching.
          ]]></description>
        </field>
        <field xml.attribute="true" xml.attributeName="sync-c">
          <name>syncBranchOnly</name>
          <version>1.11.3+</version>
          <type>boolean</type>
          <description><![CDATA[
            Set to true to only sync the given Git branch (specified in the revision attribute) rather than the whole ref space. Project elements lacking a sync-c element of their own will use this value.
          ]]></description>
        </field>
        <field xml.attribute="true" xml.attributeName="sync-s">
          <name>syncSubProjects</name>
          <version>1.11.3+</version>
          <type>boolean</type>
          <description><![CDATA[
            Set to true to also sync sub-projects.
          ]]></description>
        </field>
        <field xml.attribute="true" xml.attributeName="sync-tags">
          <name>syncTags</name>
          <version>1.11.3+</version>
          <type>boolean</type>
          <description><![CDATA[
            Set to false to only sync the given Git branch (specified in the revision attribute) rather than the other ref tags.
          ]]></description>
        </field>
      </fields>
    </class>

<!--
  <!ELEMENT manifest-server EMPTY>
  <!ATTLIST manifest-server url CDATA #REQUIRED>
-->
    <class xml.tagName="manifest-server">
      <name>RepoManifestServer</name>
      <version>1.11.3+</version>
      <fields>
        <field>
          <name>url</name>
          <version>1.11.3+</version>
          <type>String</type>
          <required>true</required>
          <description><![CDATA[
          ]]></description>
        </field>
      </fields>
    </class>

<!--
  <!ELEMENT project (annotation*,
                     project*,
                     copyfile*,
                     linkfile*)>
  <!ATTLIST project name        CDATA #REQUIRED>
  <!ATTLIST project path        CDATA #IMPLIED>
  <!ATTLIST project remote      IDREF #IMPLIED>
  <!ATTLIST project revision    CDATA #IMPLIED>
  <!ATTLIST project dest-branch CDATA #IMPLIED>
  <!ATTLIST project groups      CDATA #IMPLIED>
  <!ATTLIST project sync-c      CDATA #IMPLIED>
  <!ATTLIST project sync-s      CDATA #IMPLIED>
  <!ATTLIST project sync-tags   CDATA #IMPLIED>
  <!ATTLIST project upstream CDATA #IMPLIED>
  <!ATTLIST project clone-depth CDATA #IMPLIED>
  <!ATTLIST project force-path CDATA #IMPLIED>

One or more project elements may be specified. Each element describes a single Git repository to be cloned into the repo client workspace. You may specify Git-submodules by creating a nested project. Git-submodules will be automatically recognized and inherit their parent's attributes, but those may be overridden by an explicitly specified project element.
-->
    <class xml.tagName="default" xsd.compositor="sequence">
      <name>RepoProject</name>
      <version>1.11.3+</version>
      <fields>
        <field xml.tagName="annotation">
          <name>annotations</name>
          <version>1.11.3+</version>
          <association xml.itemsStyle="flat">
            <type>RepoAnnotation</type>
            <multiplicity>*</multiplicity>
          </association>
          <description><![CDATA[
          ]]></description>
        </field>
        <field xml.tagName="project">
          <name>projects</name>
          <version>1.11.3+</version>
          <association xml.itemsStyle="flat">
            <type>RepoProject</type>
            <multiplicity>*</multiplicity>
          </association>
          <description><![CDATA[
          ]]></description>
        </field>
        <field xml.tagName="copyfile">
          <name>copyfiles</name>
          <version>1.11.3+</version>
          <association xml.itemsStyle="flat">
            <type>RepoCopyFile</type>
            <multiplicity>*</multiplicity>
          </association>
          <description><![CDATA[
          ]]></description>
        </field>
        <field xml.tagName="linkfile">
          <name>linkfiles</name>
          <version>1.11.3+</version>
          <association xml.itemsStyle="flat">
            <type>RepoLinkFile</type>
            <multiplicity>*</multiplicity>
          </association>
          <description><![CDATA[
          ]]></description>
        </field>

        <field xml.attribute="true">
          <name>name</name>
          <version>1.11.3+</version>
          <type>String</type>
          <description><![CDATA[
            A unique name for this project. The project‘s name is appended onto its remote’s fetch URL to generate the actual URL to configure the Git remote with. The URL gets formed as:
${remote_fetch}/${project_name}.git
where ${remote_fetch} is the remote‘s fetch attribute and ${project_name} is the project’s name attribute. The suffix “.git” is always appended as repo assumes the upstream is a forest of bare Git repositories. If the project has a parent element, its name will be prefixed by the parent's.

The project name must match the name Gerrit knows, if Gerrit is being used for code reviews.
          ]]></description>
        </field>
        <field xml.attribute="true">
          <name>path</name>
          <version>1.11.3+</version>
          <type>String</type>
          <description><![CDATA[
An optional path relative to the top directory of the repo client where the Git working directory for this project should be placed. If not supplied the project name is used. If the project has a parent element, its path will be prefixed by the parent's.
          ]]></description>
        </field>
        <field xml.attribute="true">
          <name>remote</name>
          <version>1.11.3+</version>
          <type>String</type>
          <description><![CDATA[
Name of a previously defined remote element. If not supplied the remote given by the default element is used.
          ]]></description>
        </field>
        <field xml.attribute="true">
          <name>revision</name>
          <version>1.11.3+</version>
          <type>String</type>
          <description><![CDATA[
            Name of the Git branch the manifest wants to track for this project. Names can be relative to refs/heads (e.g. just “master”) or absolute (e.g. “refs/heads/master”). Tags and/or explicit SHA-1s should work in theory, but have not been extensively tested. If not supplied the revision given by the remote element is used if applicable, else the default element is used.
          ]]></description>
        </field>
        <field xml.attribute="true" xml.attributeName="dest-branch">
          <name>destBranch</name>
          <version>1.11.3+</version>
          <type>String</type>
          <description><![CDATA[
            Name of a Git branch (e.g. master). When using repo upload, changes will be submitted for code review on this branch. If unspecified both here and in the default element, revision is used instead.
          ]]></description>
        </field>
        <field xml.attribute="true">
          <name>groups</name>
          <version>1.11.3+</version>
          <type>String</type>
          <description><![CDATA[
            List of groups to which this project belongs, whitespace or comma separated. All projects belong to the group “all”, and each project automatically belongs to a group of its name:name and path:path. E.g. for , that project definition is implicitly in the following manifest groups: default, name:monkeys, and path:barrel-of. If you place a project in the group “notdefault”, it will not be automatically downloaded by repo. If the project has a parent element, the name and path here are the prefixed ones.
          ]]></description>
        </field>
        <field xml.attribute="true" xml.attributeName="sync-c">
          <name>syncBranchOnly</name>
          <version>1.11.3+</version>
          <type>String</type>
          <description><![CDATA[
            Set to true to only sync the given Git branch (specified in the revision attribute) rather than the whole ref space.
          ]]></description>
        </field>
        <field xml.attribute="true" xml.attributeName="sync-s">
          <name>syncSubProjects</name>
          <version>1.11.3+</version>
          <type>String</type>
          <description><![CDATA[
            Set to true to also sync sub-projects.
          ]]></description>
        </field>
        <field xml.attribute="true">
          <name>upstream</name>
          <version>1.11.3+</version>
          <type>String</type>
          <description><![CDATA[
            Name of the Git ref in which a sha1 can be found. Used when syncing a revision locked manifest in -c mode to avoid having to sync the entire ref space.
          ]]></description>
        </field>
        <field xml.attribute="true" xml.attribtueName="clone-depth">
          <name>cloneDepth</name>
          <version>1.11.3+</version>
          <type>int</type>
          <description><![CDATA[
            Set the depth to use when fetching this project. If specified, this value will override any value given to repo init with the --depth option on the command line.
          ]]></description>
        </field>
        <field xml.attribute="true" xml.attribtueName="force-path">
          <name>forcePath</name>
          <version>1.11.3+</version>
          <type>boolean</type>
          <description><![CDATA[
            Set to true to force this project to create the local mirror repository according to its path attribute (if supplied) rather than the name attribute.
            This attribute only applies to the local mirrors syncing, it will be ignored when syncing the projects in a client working directory.
          ]]></description>
        </field>
      </fields>
    </class>

<!--
  <!ELEMENT annotation EMPTY>
  <!ATTLIST annotation name  CDATA #REQUIRED>
  <!ATTLIST annotation value CDATA #REQUIRED>
  <!ATTLIST annotation keep  CDATA "true">
-->
    <class xml.tagName="annotation">
      <name>RepoAnnotation</name>
      <version>1.11.3+</version>
      <fields>
        <field>
          <name>name</name>
          <version>1.11.3+</version>
          <type>String</type>
          <required>true</required>
          <description><![CDATA[
          ]]></description>
        </field>
        <field>
          <name>value</name>
          <version>1.11.3+</version>
          <type>String</type>
          <required>true</required>
          <description><![CDATA[
          ]]></description>
        </field>
        <field>
          <name>keep</name>
          <version>1.11.3+</version>
          <type>boolean</type>
          <defaultValue>true</defaultValue>
          <description><![CDATA[
          ]]></description>
        </field>
      </fields>
    </class>

<!--
  <!ELEMENT copyfile EMPTY>
  <!ATTLIST copyfile src  CDATA #REQUIRED>
  <!ATTLIST copyfile dest CDATA #REQUIRED>
-->
    <class xml.tagName="copyfile">
      <name>RepoCopyFile</name>
      <version>1.11.3+</version>
      <fields>
        <field>
          <name>src</name>
          <version>1.11.3+</version>
          <type>String</type>
          <required>true</required>
          <description><![CDATA[
          ]]></description>
        </field>
        <field>
          <name>dest</name>
          <version>1.11.3+</version>
          <type>String</type>
          <required>true</required>
          <description><![CDATA[
          ]]></description>
        </field>
      </fields>
    </class>

<!--
  <!ELEMENT linkfile EMPTY>
  <!ATTLIST linkfile src CDATA #REQUIRED>
  <!ATTLIST linkfile dest CDATA #REQUIRED>
-->
    <class xml.tagName="linkfile">
      <name>RepoLinkFile</name>
      <version>1.11.3+</version>
      <fields>
        <field>
          <name>src</name>
          <version>1.11.3+</version>
          <type>String</type>
          <required>true</required>
          <description><![CDATA[
          ]]></description>
        </field>
        <field>
          <name>dest</name>
          <version>1.11.3+</version>
          <type>String</type>
          <required>true</required>
          <description><![CDATA[
          ]]></description>
        </field>
      </fields>
    </class>

<!--
  <!ELEMENT extend-project EMPTY>
  <!ATTLIST extend-project name CDATA #REQUIRED>
  <!ATTLIST extend-project path CDATA #IMPLIED>
  <!ATTLIST extend-project groups CDATA #IMPLIED>
  <!ATTLIST extend-project revision CDATA #IMPLIED>
-->
    <class xml.tagName="extend-project">
      <name>RepoExtendProject</name>
      <version>1.11.3+</version>
      <fields>
        <field>
          <name>name</name>
          <version>1.11.3+</version>
          <type>String</type>
          <required>true</required>
          <description><![CDATA[
          ]]></description>
        </field>
        <field>
          <name>path</name>
          <version>1.11.3+</version>
          <type>String</type>
          <description><![CDATA[
          ]]></description>
        </field>
        <field>
          <name>groups</name>
          <version>1.11.3+</version>
          <type>String</type>
          <description><![CDATA[
          ]]></description>
        </field>
        <field>
          <name>revision</name>
          <version>1.11.3+</version>
          <type>String</type>
          <description><![CDATA[
          ]]></description>
        </field>
      </fields>
    </class>

<!--
  <!ELEMENT remove-project EMPTY>
  <!ATTLIST remove-project name  CDATA #REQUIRED>
-->
    <class xml.tagName="remove-project">
      <name>RepoRemoveProject</name>
      <version>1.11.3+</version>
      <fields>
        <field>
          <name>name</name>
          <version>1.11.3+</version>
          <type>String</type>
          <required>true</required>
          <description><![CDATA[
          ]]></description>
        </field>
      </fields>
    </class>


<!--
  <!ELEMENT repo-hooks EMPTY>
  <!ATTLIST repo-hooks in-project CDATA #REQUIRED>
  <!ATTLIST repo-hooks enabled-list CDATA #REQUIRED>
-->
    <class xml.tagName="repo-hooks">
      <name>RepoHook</name>
      <version>1.11.3+</version>
      <fields>
        <field xml.attributeName="in-project">
          <name>inProject</name>
          <version>1.11.3+</version>
          <type>String</type>
          <required>true</required>
          <description><![CDATA[
          ]]></description>
        </field>
        <field xml.attributeName="enabled-list">
          <name>enabledList</name>
          <version>1.11.3+</version>
          <type>String</type>
          <required>true</required>
          <description><![CDATA[
          ]]></description>
        </field>
      </fields>
    </class>

<!--
  <!ELEMENT include EMPTY>
  <!ATTLIST include name CDATA #REQUIRED>
-->
    <class xml.tagName="include">
      <name>RepoInclude</name>
      <version>1.11.3+</version>
      <fields>
        <field>
          <name>name</name>
          <version>1.11.3+</version>
          <type>String</type>
          <required>true</required>
          <description><![CDATA[
          ]]></description>
        </field>
      </fields>
    </class>

  </classes>
</model>
